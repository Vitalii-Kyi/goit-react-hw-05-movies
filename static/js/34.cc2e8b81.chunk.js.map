{"version":3,"file":"static/js/34.cc2e8b81.chunk.js","mappings":"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","sources":["api/api.js","components/MovieListItem/MovieListItem.styled.js","components/MovieListItem/MovieListItem.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.js","pages/Movies.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMjE5MjMzNTAxZGIzMzJkYzJmMzkyZTgzOGNkNGZmOSIsInN1YiI6IjY1NGEwMmFlNDM0OTRmMDEzYjdkODc0MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ._3qliPvEcKUAHnkE-rnoynj0SIG5oxbGc4FKfNPE-VU';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n};\n\nexport const fetchSearchMovies = async (page, query) => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      include_adult: false,\n      query: query,\n      page: page,\n    },\n  });\n  return response.data;\n};\n\nexport const fetchCastMovie = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledLink = styled(NavLink)`\n  color: inherit;\n`;\n\nexport const NameMovie = styled.h2`\n  font-size: 18px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { NameMovie, StyledLink } from './MovieListItem.styled';\n\nexport const MovieListItem = ({ movie }) => {\n  const location = useLocation();\n  const index = movie.release_date.indexOf('-');\n  const yearRelese = movie.release_date.slice(0, index);\n\n  return (\n    <div key={movie.id}>\n      <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n        {movie.poster_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n            alt=\"movie poster\"\n            loading=\"lazy\"\n          />\n        ) : (\n          <img\n            src={'https://via.placeholder.com/250x375'}\n            alt=\"movie poster\"\n            loading=\"lazy\"\n          />\n        )}\n\n        <NameMovie>\n          {movie.title} ({yearRelese})\n        </NameMovie>\n      </StyledLink>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 1050px;\n  margin: 0 auto;\n  padding: 0 10px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 36px;\n`;\n\nexport const Item = styled.li`\n  width: 250px;\n`;\n","import { MovieListItem } from 'components/MovieListItem/MovieListItem';\nimport { Container, List, Item } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <Container>\n      <List>\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <MovieListItem movie={movie} />\n          </Item>\n        ))}\n      </List>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  width: 1050px;\n  margin: 0 auto;\n  padding: 10px;\n`;\n\nexport const BtnSubmit = styled.button`\n  cursor: pointer;\n  margin-left: 6px;\n\n  &:hover,\n  :focus {\n    background-color: #d5ead8;\n`;\n","import { BtnSubmit, FormContainer } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit, movieQuery }) => {\n  return (\n    <FormContainer>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          defaultValue={movieQuery}\n        />\n        <BtnSubmit type=\"submit\">Search</BtnSubmit>\n      </form>\n    </FormContainer>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { fetchSearchMovies } from 'api/api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieQuery = searchParams.get('query');\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [total, setTotal] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (searchParams.size === 0) return;\n\n    async function getMovies() {\n      if (movieQuery === '') {\n        // setSearchParams({});\n        return toast.error(\n          'You cannot send an empty request, please write something'\n        );\n      }\n\n      try {\n        setLoading(true);\n        const { results, total_results } = await fetchSearchMovies(\n          page,\n          movieQuery\n        );\n\n        if (total_results === 0 || results === []) {\n          return toast.error(\"Didn't find it, try again\");\n        }\n\n        setMovies(\n          page === 1 ? results : prevState => [...prevState, ...results]\n        );\n        setTotal(total_results);\n      } catch (error) {\n        toast.error(`Oops, ${error}. Please try again.`);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovies();\n  }, [query, page, total, searchParams.size, movieQuery]);\n\n  const heandleSubmit = e => {\n    e.preventDefault();\n    const newQuery = e.target.elements.query.value.trim();\n    const reqId = nanoid();\n    setQuery(`${reqId}/${newQuery}`);\n    setSearchParams({ query: `${newQuery}` });\n    setMovies([]);\n    setPage(1);\n  };\n\n  return (\n    <div>\n      <SearchForm onSubmit={heandleSubmit} movieQuery={movieQuery} />\n      {loading && <Spinner />}\n      {movies && <MoviesList movies={movies} />}\n      <Toaster />\n    </div>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["axios","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","abrupt","data","stop","apply","arguments","fetchMoviesById","_ref2","_callee2","id","_context2","concat","_x","fetchSearchMovies","_ref3","_callee3","page","query","_context3","params","include_adult","_x2","_x3","fetchCastMovie","_ref4","_callee4","_context4","_x4","fetchReviewsMovie","_ref5","_callee5","_context5","_x5","StyledLink","styled","NavLink","_templateObject","_taggedTemplateLiteral","NameMovie","_templateObject2","MovieListItem","movie","location","useLocation","index","release_date","indexOf","yearRelese","slice","_jsx","children","_jsxs","to","state","from","poster_path","src","alt","loading","title","Container","List","Item","_templateObject3","MoviesList","movies","map","FormContainer","BtnSubmit","SearchForm","onSubmit","movieQuery","type","name","autoComplete","autoFocus","placeholder","defaultValue","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","get","_useState","useState","_useState2","setQuery","_useState3","_useState4","setMovies","_useState5","_useState6","setPage","_useState7","_useState8","total","setTotal","_useState9","_useState10","setLoading","useEffect","_getMovies","_yield$fetchSearchMov","results","total_results","toast","prevState","_toConsumableArray","t0","finish","size","getMovies","e","preventDefault","newQuery","target","elements","value","trim","reqId","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","Spinner","Toaster"],"sourceRoot":""}